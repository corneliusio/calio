<div class="calio" bind:this={el}>
    {#each head as day}
        <span class="calio-head">{day}</span>
    {/each}
    {#each dates as day}
        <Day {day} {...props} on:select={event => select(day)} />
    {/each}
</div>

<script>
    import { createEventDispatcher } from 'svelte';
    import LilEpoch from '../modules/LilEpoch';
    import Day from './Day.svlt';

    const today = new LilEpoch();
    const dispatch = createEventDispatcher();

    export let headers = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        view = new LilEpoch(),
        mode = 'single',
        strict = false,
        disabled = [],
        selection,
        value,
        limit,
        min,
        max,
        el;

    min = makeMyDay(min);
    max = makeMyDay(max);
    disabled = new Array()
        .concat(disabled)
        .filter(Boolean)
        .map(makeMyDay);

    new Array().concat(value).forEach(v => select(v));

    // afterUpdate(() => {
    //     // el.parentNode.dispatchEvent(new CustomEvent(`calio:update`, {
    //     //     detail: current
    //     // }));

    //     // Object.keys(changed).forEach(key => {
    //     //     this.fire(key, current);
    //     //     this.refs.el.parentNode.dispatchEvent(new CustomEvent(`calio:${key}`, {
    //     //         detail: current
    //     //     }));
    //     // });
    // });

    $: dispatch('selection', selection);
    $: dispatch('view', view);
    $: dispatch('min', min);
    $: dispatch('max', max);

    $: props = { selection, mode, view, disabled, min, max };
    $: dates = makeDates(view, disabled);
    $: head = headers.length
        ? new Array(7).fill('', 0, 7).map((n, i) => headers[i] || n)
        : [];

    export function makeMyDay(day = null) {
        return day
            ? (day instanceof LilEpoch)
                ? day : Array.isArray(day)
                    ? new LilEpoch(...day) : new LilEpoch(day)
            : null;
    }

    export function select(day) {
        day = makeMyDay(day);

        if (day) {
            if (disabled.find(d => d.isSame(day))
                || (min && day.isBefore(min))
                || (max && day.isAfter(max))) {
                return;
            }

            switch (mode) {
                case 'range' :
                    updateRange(day);
                    break;
                case 'multi' :
                    updateMulti(day);
                    break;
                default :
                    updateSingle(day, view);
                    break;
            }
        }
    }

    export function goToYear(y) {
        view = view.clone().year(y);
    }

    export function goToNextYear() {
        view = view.clone().addYear();
    }

    export function goToLastYear() {
        view = view.clone().subYear();
    }

    export function goToMonth(m) {
        view = view.clone().startOfMonth().month(m - 1);
    }

    export function goToNextMonth() {
        view = view.clone().startOfMonth().addMonth();
    }

    export function goToLastMonth() {
        view = view.clone().startOfMonth().subMonth();
    }

    export function goToThisMonth() {
        view = today.clone().startOfMonth();
    }

    export function goToSelection() {
        if (mode === 'single' && selection) {
            view = selection.clone().startOfMonth();
        }
    }

    export function goTo(day) {
        day = makeMyDay(day);

        if (day) {
            view = day.clone().startOfMonth();
        }
    }

    function makeDates(view, disabled) {
        let current = view.clone().startOfMonth(),
            dates = [],
            dayOfFirst,
            dayOfLast;

        if (!Array.isArray(disabled)) {
            return [];
        }

        dayOfFirst = current.dayOfWeek();

        for (let i = 0; i < dayOfFirst; i++) {
            dates.unshift(current.clone().date(-i));
        }

        current.endOfMonth();

        for (let i = 1, days = current.date(); i <= days; i++) {
            dates.push(current.clone().date(i));
        }

        dayOfLast = current.dayOfWeek();
        current.startOfMonth().addMonth();

        for (let i = 1; i < (7 - dayOfLast); i++) {
            dates.push(current.clone().date(i));
        }

        return dates;
    }

    function updateRange(day) {
        let updated = selection || [],
            index = updated.findIndex(s => s.isSame(day));

        if (index > -1) {
            updated.splice(index, 1);
            selection = updated;
        } else if (updated.length > 1) {
            selection = [day.clone()];
        } else {
            updated = [...updated, day.clone()];

            updated = updated.sort((a, b) => {
                return a.timestamp() - b.timestamp();
            });

            if (strict) {
                let [start, end] = updated,
                    isInvalid = end && !!disabled.find(d => {
                        return d.isAfter(start) && d.isBefore(end);
                    });

                if (isInvalid) {
                    return;
                }
            }

            selection = updated;
        }
    }

    function updateMulti(day) {
        let updated = selection || [],
            index = updated.findIndex(s => s.isSame(day));

        if (index > -1) {
            updated.splice(index, 1);
            selection = updated;
        } else if (!limit || updated.length < limit) {
            selection = [...updated, day.clone()].sort((a, b) => {
                return a.timestamp() - b.timestamp();
            });
        }
    }

    function updateSingle(day) {
        selection = day.clone();

        if (!view.isSameMonth(day)) {
            view = day.clone().startOfMonth();
        }
    }
</script>

<style type="text/postcss">
    .calio {
        display: inline-grid;
        grid-template-columns: repeat(7, var(--size-x, var(--size, 2.25em)));
        grid-auto-rows: var(--size-y, var(--size, 2em));
        line-height: var(--size-y, var(--size, 2em));
        text-align: center;
        user-select: none;
    }

    .calio-head {
        color: var(--color, #333);
        font-weight: bold;
    }
</style>
